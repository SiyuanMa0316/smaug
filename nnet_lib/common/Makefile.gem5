# Make rules for simulating in gem5.
#
# ALADDIN_HOME needs to be defined as an environment variable.
# The gem5 dependencies are listed as .cpp files for compatibility with gem5.
# To compile them with C code, we need to explicitly use gcc.

include common/Makefile.arch

.PHONY: gem5 gem5-cpu gem5-accel clean-gem5

CFLAGS += -static -O3 -g -fno-exceptions $(BMARK_SPECIFIC_CFLAGS)
CPPFLAGS += $(INCLUDES) -DDMA_MODE

# Output names:
GEM5_CPU = $(BUILD_DIR)/$(EXEC)-gem5
GEM5_ACCEL = $(BUILD_DIR)/$(EXEC)-gem5-accel

# Debug flags.
gem5: DLEVEL=0
gem5-cpu: DLEVEL=0
gem5-accel: DLEVEL=0

# Disable some warnings.
gem5-cpu: CFLAGS+=-Wno-attributes
gem5-accel: CFLAGS+=-Wno-attributes

# Builds both standalone CPU version and the HW accelerated version.
gem5: gem5-cpu gem5-accel

# Builds the standalone CPU version only.
gem5-cpu: $(GEM5_CPU)

# Builds the gem5 version with HW acceleration turned on.
gem5-accel: $(GEM5_ACCEL)

$(GEM5_CPU): $(NATIVE_FULL_PATH_SRCS) $(GEM5_FULL_PATH_SRCS)
	@echo Building benchmark $(EXEC) for gem5.
	@mkdir -p $(BUILD_DIR)
	@$(CC) $(CPPFLAGS) $(CFLAGS) $^ -o $@ $(LFLAGS)

$(GEM5_ACCEL): $(NATIVE_FULL_PATH_SRCS) $(GEM5_FULL_PATH_SRCS)
	@echo Building benchmark $(EXEC) for gem5 with HW acceleration.
	@mkdir -p $(BUILD_DIR)
	@$(CC) $(CPPFLAGS) $(CFLAGS) -DGEM5_HARNESS $^ -o $@ $(LFLAGS)

clean-gem5:
	@echo Cleaning gem5 build products...
	@rm -rf $(GEM5_CPU)
	@rm -rf $(GEM5_ACCEL)
