.PHONY: src-symlinks

# SMAUG_HOME is needed for unit tests to find the test inputs.
ifeq (${SMAUG_HOME},)
$(error SMAUG_HOME is not set!)
endif

EXEC = smaug
MAIN = src/smaug.cpp
SRCS = src/operators/common.cpp \
       src/operators/reorder_op_impl.cpp \
       src/operators/ref/ref_batch_norm_op.cpp \
       src/operators/ref/ref_eltwise_add_op.cpp \
       src/operators/ref/ref_convolution_op.cpp \
       src/operators/ref/ref_depthwise_convolution_op.cpp \
       src/operators/ref/ref_inner_product_op.cpp \
       src/operators/ref/ref_pooling_op.cpp \
       src/operators/ref/ref_relu_op.cpp \
       src/operators/ref/ref_elu_op.cpp \
       src/operators/ref/ref_sigmoid_op.cpp \
       src/operators/ref/ref_softmax_op.cpp \
       src/operators/ref/ref_tanh_op.cpp \
       src/operators/smv/smv_tiling_common.cpp \
       src/operators/smv/smv_tiling_base.cpp \
       src/operators/smv/smv_convolution_op.cpp \
       src/operators/smv/smv_convolution_tiling.cpp \
       src/operators/smv/kernels/convolution_simd.c \
       src/operators/smv/smv_inner_product_op.cpp \
       src/operators/smv/smv_inner_product_tiling.cpp \
       src/operators/smv/kernels/matrix_multiply.c \
       src/operators/smv/smv_pooling_op.cpp \
       src/operators/smv/smv_pooling_tiling.cpp \
       src/operators/smv/kernels/pooling.c \
       src/operators/smv/smv_batch_norm_op.cpp \
       src/operators/smv/smv_batch_norm_tiling.cpp \
       src/operators/smv/kernels/batch_norm.c \
       src/operators/smv/smv_unary_op_common.cpp \
       src/operators/smv/kernels/activation_functions_simd.c \
       src/core/backend.cpp \
       src/core/globals.cpp \
       src/core/tensor_utils.cpp \
       src/core/network.cpp \
       src/core/network_builder.cpp \
       src/utility/debug_stream.cpp \
       src/utility/utils.cpp
PROTO_SRCS = src/core/graph.proto \
             src/core/node.proto \
             src/core/tensor.proto \
             src/core/types.proto

TESTS_COMMON = src/core/smaug_test.cpp \
               src/operators/smv/smv_test_common.cpp
TESTS = src/core/tensor_test.cpp \
        src/operators/ref/ref_convolution_op_test.cpp \
        src/operators/ref/ref_batch_norm_op_test.cpp \
        src/operators/ref/ref_depthwise_convolution_op_test.cpp \
        src/operators/ref/ref_eltwise_ops_test.cpp \
        src/operators/ref/ref_inner_product_op_test.cpp \
        src/operators/ref/ref_pooling_op_test.cpp \
        src/operators/ref/ref_softmax_op_test.cpp \
        src/operators/reorder_op_test.cpp \
        src/operators/smv/smv_convolution_tiling_test.cpp \
        src/operators/smv/smv_convolution_op_test.cpp \
        src/operators/smv/smv_inner_product_tiling_test.cpp \
        src/operators/smv/smv_inner_product_op_test.cpp \
        src/operators/smv/smv_pooling_tiling_test.cpp \
        src/operators/smv/smv_pooling_op_test.cpp \
        src/operators/smv/smv_batch_norm_tiling_test.cpp \
        src/operators/smv/smv_batch_norm_op_test.cpp \
        src/operators/smv/smv_unary_tiling_test.cpp \
        src/operators/smv/smv_unary_op_test.cpp \
        src/operators/smv/kernels/load_store_fp16_data_test.cpp
PY_TESTS = src/python/tensor_test.py \
           src/python/ops_test.py


GEM5_DMA_SRC = gem5/dma_interface.c gem5/dma_interface.h
GEM5_SYS_SRCS = gem5/aladdin_sys_connection.cpp gem5/aladdin_sys_connection.h \
                gem5/aladdin_sys_constants.cpp gem5/aladdin_sys_constants.h \
                gem5/gem5_harness.h
GEM5_SRCS = $(GEM5_DMA_SRC) $(GEM5_SYS_SRCS)

LFLAGS = -L$(BOOST_ROOT)/lib -lm -lrt -lboost_graph -lboost_program_options -lprotobuf -lpthread
CFLAGS = -O0 -g
CXXFLAGS = -std=c++11 $(CFLAGS) -Wno-deprecated-declarations
INCLUDES = -I$(BUILD_DIR) \
           -I$(BUILD_DIR)/gem5 \
           -I$(BOOST_ROOT)/include \
           -Isrc/third_party/Catch2/single_include \
           -Isrc/third_party/FP16/include

BMARK_SPECIFIC_CFLAGS = -DDMA_INTERFACE_V3

export WORKLOAD=$(shell paste -sd "," $(CURRENT_DIR)/kernel_functions.txt)

#####################################
####      COMMON BUILD SETUP     ####
#####################################

COMMON_DIR := $(CURRENT_DIR)
CURRENT_DIR := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
BUILD_DIR = build
PYTHON_DIR = $(CURRENT_DIR)/../src/python
# The find command doesn't handle spaces in filenames, which will lead to
# errors when creating symlinks later. The sed part resolves this by replacing
# the spaces with "\\ ".
SRC_SYMLINKS := $(shell find src ! -name '*.swp' | sed 's: :\\ :g')
SRC_SYMLINKS := $(patsubst src/%, $(BUILD_DIR)/%, $(SRC_SYMLINKS))

PROTO_PY_SRCS = $(patsubst src/core/%.proto, $(PYTHON_DIR)/%_pb2.py, $(PROTO_SRCS))
PROTO_CPP_SRCS = $(patsubst %.proto, %.pb.cpp, $(PROTO_SRCS))
BUILD_PROTO_CPP_SRCS = $(patsubst src/%, $(BUILD_DIR)/%, $(PROTO_CPP_SRCS))
BUILD_GEM5_SRCS = $(filter-out %.h, $(patsubst %, $(BUILD_DIR)/%, $(GEM5_SRCS)))

# Create a build directory that just has symlinks to all the source files, so
# we can build everything seemingly "alongside" the source.
src-symlinks: $(SRC_SYMLINKS)

$(SRC_SYMLINKS):
	@if [ -d $(BUILD_DIR) ]; then find -L $(BUILD_DIR) -type l -print -delete 2>&1 > /dev/null; fi
	@mkdir -p $(BUILD_DIR)/gem5
	@cp -asf $(CURRENT_DIR)/../src/* $(BUILD_DIR)/
	@$(foreach f, $(GEM5_SRCS), cp -asf $(ALADDIN_HOME)/$(f) $(BUILD_DIR)/$(f);)

%.pb.cpp: %.proto
	$(PROTOC) -I=$(dir $^) --cpp_out=$(dir $^) $^
	mv $(basename $^).pb.cc $@

$(PYTHON_DIR)/%_pb2.py: $(BUILD_DIR)/core/%.proto
	mkdir -p $(PYTHON_DIR)
	$(PROTOC) -I=$(dir $^) --python_out=$(PYTHON_DIR) $^
