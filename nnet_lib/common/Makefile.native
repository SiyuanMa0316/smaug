# Make rules for native host-side execution.

include common/Makefile.common

.PHONY: all tests clean run-tests

# CFLAGS += -std=gnu++11 $(NATIVE_SIMD_FLAGS) -mf16c -flax-vector-conversions

# Disable some warnings.
native: CFLAGS+=-Wno-attributes

######################################
####      PRIMARY BUILD SETUP     ####
######################################

# Create object files for each cpp/c file.
BUILD_SRCS = $(patsubst src/%, $(BUILD_DIR)/%, $(SRCS))
BUILD_SRCS_OBJS := $(patsubst %.cpp, %.o, $(BUILD_SRCS))
BUILD_SRCS_OBJS := $(patsubst %.c, %.o, $(BUILD_SRCS_OBJS))

BUILD_TESTS = $(patsubst src/%, $(BUILD_DIR)/%, $(TESTS))
BUILD_TESTS_OBJS := $(patsubst %.cpp, %.o, $(BUILD_TESTS))
BUILD_TESTS_OBJS := $(patsubst %.cpp, %.o, $(BUILD_TESTS_OBJS))

BUILD_MAIN_SRC = $(patsubst src/%, $(BUILD_DIR)/%, $(MAIN))
BUILD_MAIN_OBJ = $(patsubst %.cpp, %.o, $(BUILD_MAIN_SRC))

all: src-symlinks $(BUILD_DIR)/$(EXEC)

$(BUILD_DIR)/$(EXEC): $(BUILD_SRCS_OBJS) $(BUILD_MAIN_OBJ)
	$(CXX) $^ $(LFLAGS) -o $@

%.o: %.cpp
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $(INCLUDES) $^ -o $@

%.o: %.c
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $(INCLUDES) $^ -o $@

########################################
####      UNIT TEST BUILD SETUP     ####
########################################

CATCH_MAIN = $(BUILD_DIR)/core/catch
CATCH_OBJ = $(CATCH_MAIN).o
CATCH_SRC = $(CATCH_MAIN).cpp

TEST_OBJ = $(patsubst %.cpp, %.o, $(BUILD_TESTS))
TEST_BIN = $(patsubst %.cpp, %, $(BUILD_TESTS))

tests: src-symlinks $(TEST_BIN)

$(TEST_BIN) : % : %.o $(CATCH_OBJ) $(BUILD_SRCS_OBJS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDES) $^ -o $@ $(LFLAGS)

run-tests:
	@$(foreach t, $(TEST_BIN), echo $(t); ./$(t);)

###########################
####      CLEAN UP     ####
###########################

clean:
	rm -f $(BUILD_DIR)/$(EXEC) $(TEST_BIN) $(TEST_OBJ) $(BUILD_SRCS_OBJS) \
		$(BUILD_MAIN_OBJ)
	find $(BUILD_DIR) . -name "*.llvm" | xargs rm -f
