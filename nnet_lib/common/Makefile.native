# Make rules for native host-side execution.

include common/Makefile.common

.PHONY: all tests clean run-tests

# CFLAGS += -std=gnu++11 $(NATIVE_SIMD_FLAGS) -mf16c -flax-vector-conversions

# Disable some warnings.
native: CFLAGS+=-Wno-attributes

GEM5_SIMD_CFLAGS = -msse3 -msse2 -mno-ssse3 -mno-sse4.1 -mno-sse4.2
CFLAGS += -DDMA_MODE $(BMARK_SPECIFIC_CFLAGS) $(GEM5_SIMD_CFLAGS)

######################################
####      PRIMARY BUILD SETUP     ####
######################################

# Create object files for each cpp/c file.
BUILD_SRCS = $(patsubst src/%, $(BUILD_DIR)/%, $(SRCS))
BUILD_SRCS += $(BUILD_PROTO_CPP_SRCS) $(BUILD_GEM5_SRCS)
BUILD_SRCS_OBJS := $(patsubst %.cpp, %.o, $(BUILD_SRCS))
BUILD_SRCS_OBJS := $(patsubst %.c, %.o, $(BUILD_SRCS_OBJS))
BUILD_SRCS_OBJS := $(patsubst %.S, %.o, $(BUILD_SRCS_OBJS))

BUILD_TESTS_COMMON = $(patsubst src/%, $(BUILD_DIR)/%, $(TESTS_COMMON))
BUILD_TESTS = $(patsubst src/%, $(BUILD_DIR)/%, $(TESTS))
BUILD_PY_TESTS = $(patsubst src/%, $(BUILD_DIR)/%, $(PY_TESTS))

BUILD_MAIN_SRC = $(patsubst src/%, $(BUILD_DIR)/%, $(MAIN))
BUILD_MAIN_OBJ = $(patsubst %.cpp, %.o, $(BUILD_MAIN_SRC))

all: src-symlinks $(BUILD_PROTO_CPP_SRCS) $(PROTO_PY_SRCS) $(BUILD_DIR)/$(EXEC)

$(BUILD_DIR)/$(EXEC): $(BUILD_SRCS_OBJS) $(BUILD_MAIN_OBJ)
	$(CXX) $^ $(LFLAGS) -o $@

%.o: %.cpp
	$(CXX) -c $(CXXFLAGS) $(INCLUDES) $^ -o $@

%.o: %.c
	$(CC) -c $(CFLAGS) $(INCLUDES) $^ -o $@

%.o: %.S
	$(CC) -c $(CFLAGS) $(INCLUDES) $^ -o $@

########################################
####      UNIT TEST BUILD SETUP     ####
########################################

CATCH_MAIN = $(BUILD_DIR)/core/catch
CATCH_OBJ = $(CATCH_MAIN).o
CATCH_SRC = $(CATCH_MAIN).cpp

TEST_OBJ = $(patsubst %.cpp, %.o, $(BUILD_TESTS))
TEST_BIN = $(patsubst %.cpp, %, $(BUILD_TESTS))

tests: src-symlinks $(TEST_BIN) $(BUILD_PROTO_CPP_SRCS) $(PROTO_PY_SRCS) $(BUILD_GEM5_SRCS)

$(TEST_BIN) : % : %.o $(CATCH_OBJ) $(BUILD_SRCS_OBJS) $(BUILD_TESTS_COMMON)
	$(CXX) $(CXXFLAGS) $(INCLUDES) $^ -o $@ $(LFLAGS)

run-tests: $(TEST_BIN) $(BUILD_PY_TESTS)
	@$(foreach t, $(TEST_BIN), echo $(t); ./$(t);)
	@$(foreach t, $(BUILD_PY_TESTS), echo $(t); ./$(t);)

###########################
####      CLEAN UP     ####
###########################

clean:
	rm -f $(BUILD_DIR)/$(EXEC) $(TEST_BIN) $(TEST_OBJ)
	find $(BUILD_DIR) -name "*.llvm" -o -name "*.o" | xargs rm -f
