############ NOTES ###############
# Define ACCEL_NAME, TRACER_HOME, ALADDIN_HOME, WORKLOAD, and SRCS
# before including this.
##################################

include common/Makefile.common

.PHONY: dma-trace-binary run-trace clean-trace src-symlinks

##################################
#         TOP LEVEL RULES        #
##################################

dma-trace-binary: DLEVEL=0
dma-trace-binary: build-trace

##################################
#      COMPILATION FLAGS         #
##################################

TRACER = $(TRACER_HOME)/lib/full_trace.so
LOGGER = $(TRACER_HOME)/lib/trace_logger.llvm
GET_LABELED_STMTS = $(TRACER_HOME)/bin/get-labeled-stmts

CPPFLAGS += -DTRACE_MODE -DDMA_MODE
LFLAGS += -lz

################################
#     BUILD PRODUCT REQS       #
################################

LLVM_VERSION = $(shell clang-6.0 --version | grep -o -m 1 "[0-9\.]\+" | head -n 1)

# The file containinng the main function must be instrumented LAST so that it
# can include all labels discovered by the clangtool. Therefore, we take it out
# of this list and manually append it to the end.
ALL_TRACER_SRCS = $(filter-out $(MAIN), $(SRCS) $(GEM5_DMA_SRC)) $(MAIN)

LLVM_OBJS = $(filter-out %.h, \
						$(patsubst %.c, $(BUILD_DIR)/%-opt.llvm, \
						$(patsubst src/%.cpp, $(BUILD_DIR)/%-opt.llvm, $(ALL_TRACER_SRCS))))

################################
#         SANITY CHECKS        #
################################

#########################################################
#        INSTRUMENTATION AND TRACE FILE GENERATION      #
#########################################################

build-trace: src-symlinks
	@$(MAKE) -f common/Makefile.tracer $(BUILD_DIR)/$(EXEC)-instrumented

%-labelmap: %.cpp
	@$(GET_LABELED_STMTS) $^ -- \
			-I$(LLVM_HOME)/lib/clang/$(LLVM_VERSION)/include \
			$(INCLUDES) $(CPPFLAGS) $(CXXFLAGS) -mf16c $(BMARK_SPECIFIC_CFLAGS)
	@cat labelmap >> $(BUILD_DIR)/labelmap

%-labelmap: %.c
	@$(GET_LABELED_STMTS) $^ -- \
			-I$(LLVM_HOME)/lib/clang/$(LLVM_VERSION)/include \
			$(INCLUDES) $(CPPFLAGS) $(CFLAGS) -mf16c $(BMARK_SPECIFIC_CFLAGS)
	@cat labelmap >> $(BUILD_DIR)/labelmap

$(BUILD_DIR)/full.llvm: $(LLVM_OBJS)
	@echo Linking instrumented LLVM objects...
	@llvm-link-6.0 -o $@ $^ $(LOGGER)

$(BUILD_DIR)/full.s: $(BUILD_DIR)/full.llvm
	@llc-6.0 -O0 -disable-fp-elim -filetype=asm -o $@ $<

$(BUILD_DIR)/$(EXEC)-instrumented: $(BUILD_DIR)/full.s
	@echo Producing final binary...
	@g++ -O0 -fno-inline -o $@ $^ $(LFLAGS)

%-opt.llvm: %.c %-labelmap
	@echo Building $<
	@clang-6.0 -g -O1 -S -fno-slp-vectorize -fno-vectorize -fno-unroll-loops \
        -fno-inline -fno-builtin \
				-mavx \
				-mf16c \
				-emit-llvm \
				$(INCLUDES) \
				$(CPPFLAGS) \
        $(BMARK_SPECIFIC_CFLAGS) \
        -o $*.llvm $<
	@opt-6.0 -S -load=$(TRACER) -fulltrace \
				-labelmapwriter -trace-all-callees -i $(BUILD_DIR)/labelmap \
				$*.llvm -o $*-opt.llvm

%-opt.llvm: %.cpp %-labelmap
	@echo Building $<
	@clang++-6.0 -g -O1 -S -fno-slp-vectorize -fno-vectorize -fno-unroll-loops \
        -fno-inline -fno-builtin \
				-mavx \
				-mf16c \
				-emit-llvm \
				-std=c++11 \
				-D_GLIBCXX11_USE_CXX11_ABI=1 \
				$(INCLUDES) \
				$(CPPFLAGS) \
        $(BMARK_SPECIFIC_CFLAGS) \
        -o $*.llvm $<
	@opt-6.0 -S -load=$(TRACER) -fulltrace \
				-labelmapwriter -trace-all-callees -i $(BUILD_DIR)/labelmap \
				$*.llvm -o $*-opt.llvm

clean-trace:
	@echo "Cleaning trace build products..."
	@cd $(BUILD_DIR) && rm -rf *.llvm *.h *.cpp *.s labelmap *-instrumented
	@rm -f dynamic_trace.gz
	@rm -f labelmap
	@rm -f output_labels.out
